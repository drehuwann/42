C Piscine
C 11
Chapter III
Exercise 00 : ft_foreach
Turn-in directory : ex00/
Files to turn in : ft_foreach.c
Allowed functions : None

Create the function ft_foreach which, for a given ints array, applies a
function on all elements of the array. This function will be applied following
the array’s order.
Here’s how the function should be prototyped :

void ft_foreach(int *tab, int length, void(*f)(int));

For example, the function ft_foreach could be called as follows in order to
display all ints of the array :
ft_foreach(tab, 1337, &ft_putnbr);

Chapter IV
Exercise 01 : ft_map
Turn-in directory : ex01/
Files to turn in : ft_map.c
Allowed functions : malloc

Create the function ft_map which, for a given ints array, applies a function on
all elements of the array (in order) and returns a array of all the return
values.
This function will be applied following the array’s order.
Here’s how the function should be prototyped :

int *ft_map(int *tab, int length, int(*f)(int));

Chapter V
Exercise 02 : ft_any
Turn-in directory : ex02/
Files to turn in : ft_any.c
Allowed functions : None

Create a function ft_any which will return 1 if, passed to the function f, at
least one element of the array returns something else than 0. Else, it should
return 0.
This function will be applied following the array’s order.
Here’s how the function should be prototyped :

int ft_any(char **tab, int(*f)(char*));

The array will be delimited with a null pointer.

Chapter VI
Exercise 03 : ft_count_if
Turn-in directory : ex03/
Files to turn in : ft_count_if.c
Allowed functions : None

Create a function ft_count_if which will return the number of elements of the
array that return does not return 0 when passed to the function f.
This function will be applied following the array’s order.
Here’s how the function should be prototyped :

int ft_count_if(char **tab, int length, int(*f)(char*));

Chapter VII
Exercise 04 : ft_is_sort
Turn-in directory : ex04/
Files to turn in : ft_is_sort.c
Allowed functions : None

Create a function ft_is_sort which returns 1 if the array is sorted and 0 if it
isn’t.
The function given as argument should return a negative integer if the first
argument is lower than the second, 0 if they’re equal or a positive integer for
anything else.
Here’s how the function should be prototyped :

int ft_is_sort(int *tab, int length, int(*f)(int, int));

Chapter VIII
Exercise 05 : do-op
Turn-in directory : ex05/
Files to turn in : Your program files
Allowed functions : write

Create a program called do-op.
The progam will be executed with three arguments:
do-op value1 operateur value2

Example :
$>./do-op 42 "+" 21
63
$>

You should use an array of pointers to function to take care of the operator.
In case of an invalid operator your program should print 0.
If the number of arguments is invalid, do-op doesn’t display anything.
Your program should accept and print the result for the following operators:
’+’ ’-’ ’/’ ’*’ and ’%’
In case of a division by 0, it should print:
Stop : division by zero

In case of a modulo by 0, it should print:
Stop : modulo by zero

Here’s an example of tests the Moulinette will run :
$> make clean
$> make
$> ./do-op
$> ./do-op 1 + 1
2
$> ./do-op 42amis - --+-20toto12
62
$> ./do-op 1 p 1
0
$> ./do-op 1 + toto3
1
$>
$> ./do-op toto3 + 4
4
$> ./do-op foo plus bar
0
$> ./do-op 25 / 0
Stop : division by zero
$> ./do-op 25 % 0
Stop : modulo by zero
$>

Chapter IX
Exercise 06 : ft_sort_string_tab
Turn-in directory : ex06/
Files to turn in : ft_sort_string_tab.c
Allowed functions : None

Create the function ft_sort_string_tab, by ascii order the strings in tab.
tab will be null terminated
The sorting will be performed by exchanging the array’s pointers.
Here’s how it should be prototyped :

void ft_sort_string_tab(char **tab);

Chapter X
Exercise 07 :
ft_advanced_sort_string_tab
Turn-in directory : ex07/
Files to turn in : ft_advanced_sort_string_tab.c
Allowed functions : None

Create the function ft_advanced_sort_string_tab which sorts, depending on the
return of the function given as argument
The sorting will be performed by exchanging the array’s pointers.
tab will be null terminated
Here’s how it should be prototyped :

void ft_advanced_sort_string_tab(char **tab, int(*cmp)(char *, char *));

Calling ft_advanced_sort_string_tab() with ft_strcmp as a second
argument will return the same result as ft_sort_string_tab().
