C Piscine
C 08

Chapter III
Exercise 00 : ft.h
Turn-in directory : ex00/
Files to turn in : ft.h
Allowed functions : None

Create your ft.h file.
It contains all prototypes of functions :

void ft_putchar(char c);
void ft_swap(int *a, int *b);
void ft_putstr(char *str);
int ft_strlen(char *str);
int ft_strcmp(char *s1, char *s2);

5

Chapter IV
Exercise 01 : ft_boolean.h
Exercise 01
ft_boolean.h
Turn-in directory : ex01/
Files to turn in : ft_boolean.h
Allowed functions : None

Create a ft_boolean.h file. It’ll compile and run the following main
appropriately :

#include "ft_boolean.h"

void ft_putstr(char *str)
{
  while (*str)
  write(1, str++, 1);
}

t_bool ft_is_even(int nbr)
{
  return ((EVEN(nbr)) ? TRUE : FALSE);
}

int main(int argc, char **argv)
{
  if (ft_is_even(argc - 1) == TRUE)
    ft_putstr(EVEN_MSG);
  else
    ft_putstr(ODD_MSG);
  return (SUCCESS);
}

This program should display

I have an even number of arguments.
ou
I have an odd number of arguments.
followed by a line break when adequate.

Chapter V
Exercise 02 : ft_abs.h
Turn-in directory : ex02/
Files to turn in : ft_abs.h
Allowed functions : None

Create a macro ABS which replaces its argument by it absolute value :
#define ABS(Value)

Chapter VI
Exercise 03 : ft_point.h
Turn-in directory : ex03/
Files to turn in : ft_point.h
Allowed functions : None

Create a file ft_point.h that’ll compile the following main :
#include "ft_point.h"
void set_point(t_point *point)
{
  point->x = 42;
  point->y = 21;
}

int main(void)
{
  t_point point;
  set_point(&point);
  return (0);
}

Chapter VII
Exercise 04 : ft_strs_to_tab
Turn-in directory : ex04/
Files to turn in : ft_strs_to_tab.c
Allowed functions : malloc, free

Create a function that takes an array of string as argument and the size of
this array.
Here’s how it should be prototyped :

struct s_stock_str *ft_strs_to_tab(int ac, char **av);

It will transform each element of av into a structure.
The structure will be defined in the ft_stock_str.h file that we will provided,
like this :
typedef struct s_stock_str
{
  int size;
  char *str;
  char *copy;
} t_stock_str;

size being the length of the string;
str being string;
copy being a copy of the string ;
It should keep the order of av.

The returned array should allocated in memory and its last element’s str set to
0, this will mark the end of the array.
It should return a NULL pointer if an error occurs.
We’ll test your function with our ft_show_tab (next exercise). Make it work
according to this !

Chapter VIII
Exercise 05 : ft_show_tab
Turn-in directory : ex05/
Files to turn in : ft_show_tab.c
Allowed functions : write

Create a function that displays the content of the array created by the
previous function.
Here’s how it should be prototyped :

void ft_show_tab(struct s_stock_str *par);

The structure will be the same as the previous exercise and will be defined in
the ft_stock_str.h file
For each element, we’ll display:
    the string followed by a ’\n’
    the size followed by a ’\n’
    the copy of the string (that could have been modified) followed by a ’\n’
We’ll test your function with our ft_strs_to_tab (previous exercise). Make it
work according to this !
