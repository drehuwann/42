C Piscine
C 09
Chapter III
Exercise 00 : libft
Turn-in directory : ex00/
Files to turn in : libft_creator.sh, ft_putchar.c, ft_swap.c, ft_putstr.c,
ft_strlen.c, ft_strcmp.c
Allowed functions : write

Create your ft library. It’ll be called libft.a.
A shell script called libft_creator.sh will compile source files appropriately
and will create your library.
This library should contain all of the following functions :

void ft_putchar(char c);
void ft_swap(int *a, int *b);
void ft_putstr(char *str);
int ft_strlen(char *str);
int ft_strcmp(char *s1, char *s2);

We’ll launch the following command-line :
sh libft_creator.sh

Chapter IV
Exercise 01 : Makefile
Turn-in directory : ex01/
Files to turn in : Makefile
Allowed functions : None

Create the Makefile that’ll compile a library libft.a.
Your makefile should print all the command it’s running.
Your makefile should not run any unnecessary command.
The Makefile will get its source files from the "srcs" directory.
Those files will be: ft_putchar.c, ft_swap.c, ft_putstr.c, ft_strlen.c,
ft_strcmp.c
The Makefile will get its header files from the "includes" directory.
Those files will be: ft.h
It should compile the .c files with gcc and with -Wall -Wextra -Werror flags in
that order.
The lib should be at the root of the exercise.
.o files should be near their .c file.
The Makefile should also implement the following rules: clean, fclean, re, all
and of course libft.a.
Running just make should be equal to make all
The rule all should be equal to make libft.a.
The rule clean should remove all the temporary generated files.
The rule fclean should be like a make clean plus all the binary made with make
all.
The rule re should be like a make fclean followed by make all.
Your makefile should not compile any file for nothing.
We’ll only fetch your Makefile and test it with our files.

Watch out for wildcards!

Chapter V
Exercise 02 : ft_split
Turn-in directory : ex02/
Files to turn in : ft_split.c
Allowed functions : malloc

Create a function that slits a string of character depending on another string
of characters.
You’ll have to use each character from the string charset as a separator.
The function returns an array where each box contains the address of a string
wrapped between two separators. The last element of that array should equal to
0 to indicate the end of the array.
There cannot be any empty strings in your array. Draw your conclusions
accordingly.
The string given as argument won’t be modifiable.
Here’s how it should be prototyped :

char **ft_split(char *str, char *charset);
